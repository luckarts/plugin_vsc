/**
 * D√©monstration du syst√®me de m√©moires intelligent
 * Ce fichier peut √™tre utilis√© pour tester manuellement le syst√®me
 */

import * as vscode from 'vscode';
import { IntelligentMemoryManager } from './memoryManager';
import { MemoryType } from './types';

export class MemorySystemDemo {
  private memoryManager: IntelligentMemoryManager;

  constructor(globalStorageUri: vscode.Uri) {
    this.memoryManager = new IntelligentMemoryManager(globalStorageUri);
  }

  /**
   * D√©monstration compl√®te du syst√®me de m√©moires
   */
  async runDemo(): Promise<void> {
    try {
      console.log('üß† D√©marrage de la d√©monstration du syst√®me de m√©moires...');
      
      // Initialisation
      await this.memoryManager.initialize();
      console.log('‚úÖ Syst√®me de m√©moires initialis√©');

      // D√©monstration des op√©rations CRUD
      await this.demonstrateCRUD();
      
      // D√©monstration de la recherche
      await this.demonstrateSearch();
      
      // D√©monstration des statistiques
      await this.demonstrateStats();
      
      // D√©monstration de l'export/import
      await this.demonstrateExportImport();
      
      // D√©monstration de la compression
      await this.demonstrateCompression();
      
      console.log('üéâ D√©monstration termin√©e avec succ√®s !');
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la d√©monstration :', error);
      throw error;
    }
  }

  /**
   * D√©monstration des op√©rations CRUD
   */
  private async demonstrateCRUD(): Promise<void> {
    console.log('\nüìù D√©monstration des op√©rations CRUD...');
    
    // Cr√©er des m√©moires de diff√©rents types
    const personalMemoryId = await this.memoryManager.createMemory(
      'Toujours utiliser TypeScript pour une meilleure s√©curit√© de type. √âviter any autant que possible.',
      MemoryType.PERSONAL,
      ['typescript', 'best-practice', 'type-safety'],
      {
        language: 'typescript',
        category: 'coding-standard',
        priority: 5
      }
    );
    console.log(`‚úÖ M√©moire personnelle cr√©√©e : ${personalMemoryId.substring(0, 8)}...`);

    const repositoryMemoryId = await this.memoryManager.createMemory(
      'Ce projet utilise React avec TypeScript. Structure : src/components, src/hooks, src/utils.',
      MemoryType.REPOSITORY,
      ['react', 'typescript', 'project-structure'],
      {
        project: 'code-assist-ai',
        language: 'typescript',
        category: 'architecture'
      }
    );
    console.log(`‚úÖ M√©moire de repository cr√©√©e : ${repositoryMemoryId.substring(0, 8)}...`);

    const guidelineMemoryId = await this.memoryManager.createMemory(
      'Toujours √©crire des tests unitaires pour les fonctions critiques. Utiliser des noms descriptifs.',
      MemoryType.GUIDELINE,
      ['testing', 'unit-tests', 'naming'],
      {
        category: 'quality-assurance',
        priority: 4
      }
    );
    console.log(`‚úÖ M√©moire guideline cr√©√©e : ${guidelineMemoryId.substring(0, 8)}...`);

    // Lire une m√©moire
    const retrievedMemory = await this.memoryManager.getMemory(personalMemoryId);
    console.log(`‚úÖ M√©moire r√©cup√©r√©e : "${retrievedMemory?.content.substring(0, 50)}..."`);

    // Mettre √† jour une m√©moire
    await this.memoryManager.updateMemory(personalMemoryId, {
      content: retrievedMemory!.content + ' Utiliser des interfaces pour d√©finir les contrats.',
      tags: [...retrievedMemory!.tags, 'interfaces']
    });
    console.log(`‚úÖ M√©moire mise √† jour avec succ√®s`);

    // V√©rifier la mise √† jour
    const updatedMemory = await this.memoryManager.getMemory(personalMemoryId);
    console.log(`‚úÖ Contenu mis √† jour : "${updatedMemory?.content.substring(0, 60)}..."`);
  }

  /**
   * D√©monstration de la recherche
   */
  private async demonstrateSearch(): Promise<void> {
    console.log('\nüîç D√©monstration de la recherche...');
    
    // Recherche par contenu
    const typeScriptResults = await this.memoryManager.searchMemories('typescript');
    console.log(`‚úÖ Recherche "typescript" : ${typeScriptResults.length} r√©sultats`);
    
    if (typeScriptResults.length > 0) {
      const topResult = typeScriptResults[0];
      console.log(`   üìå Meilleur r√©sultat (score: ${(topResult.relevanceScore * 100).toFixed(1)}%) : "${topResult.memory.content.substring(0, 50)}..."`);
    }

    // Recherche par tags
    const testingResults = await this.memoryManager.searchMemories('testing');
    console.log(`‚úÖ Recherche "testing" : ${testingResults.length} r√©sultats`);

    // Recherche avec filtres
    const personalMemories = await this.memoryManager.searchMemories('', {
      type: MemoryType.PERSONAL
    });
    console.log(`‚úÖ M√©moires personnelles : ${personalMemories.length} r√©sultats`);

    const repositoryMemories = await this.memoryManager.getMemoriesByType(MemoryType.REPOSITORY);
    console.log(`‚úÖ M√©moires de repository : ${repositoryMemories.length} r√©sultats`);
  }

  /**
   * D√©monstration des statistiques
   */
  private async demonstrateStats(): Promise<void> {
    console.log('\nüìä D√©monstration des statistiques...');
    
    const stats = await this.memoryManager.getStats();
    
    console.log(`‚úÖ Statistiques globales :`);
    console.log(`   üìù Total des m√©moires : ${stats.totalMemories}`);
    console.log(`   üíæ Taille totale : ${(stats.totalSize / 1024).toFixed(2)} KB`);
    console.log(`   üóúÔ∏è M√©moires compress√©es : ${stats.compressedCount}`);
    console.log(`   üìà Taille moyenne : ${Math.round(stats.averageSize)} caract√®res`);
    
    console.log(`‚úÖ R√©partition par type :`);
    console.log(`   üìù Personal : ${stats.memoryByType.personal}`);
    console.log(`   üè¢ Repository : ${stats.memoryByType.repository}`);
    console.log(`   üìã Guidelines : ${stats.memoryByType.guideline}`);
    console.log(`   üí¨ Session : ${stats.memoryByType.session}`);
    
    if (stats.oldestMemory && stats.newestMemory) {
      console.log(`‚úÖ P√©riode :`);
      console.log(`   üìÖ Plus ancienne : ${stats.oldestMemory.toLocaleDateString()}`);
      console.log(`   üìÖ Plus r√©cente : ${stats.newestMemory.toLocaleDateString()}`);
    }
  }

  /**
   * D√©monstration de l'export/import
   */
  private async demonstrateExportImport(): Promise<void> {
    console.log('\nüíæ D√©monstration de l\'export/import...');
    
    // Export JSON
    const jsonExport = await this.memoryManager.exportMemories({ format: 'json' });
    const exportedMemories = JSON.parse(jsonExport);
    console.log(`‚úÖ Export JSON : ${exportedMemories.length} m√©moires export√©es`);
    
    // Export Markdown
    const markdownExport = await this.memoryManager.exportMemories({ format: 'markdown' });
    console.log(`‚úÖ Export Markdown : ${markdownExport.length} caract√®res`);
    
    // Cr√©er une sauvegarde
    const backup = await this.memoryManager.createBackup();
    console.log(`‚úÖ Sauvegarde cr√©√©e : ${backup.memories.length} m√©moires, checksum: ${backup.checksum.substring(0, 8)}...`);
    
    // Test d'import (avec des donn√©es de test)
    const testMemory = {
      id: 'demo-import-test',
      content: 'M√©moire import√©e pour la d√©monstration',
      type: MemoryType.SESSION,
      timestamp: new Date(),
      size: 42,
      compressed: false,
      tags: ['demo', 'import'],
      metadata: { category: 'test' }
    };
    
    const importResult = await this.memoryManager.importMemories(JSON.stringify([testMemory]));
    console.log(`‚úÖ Import test : ${importResult.imported} import√©es, ${importResult.skipped} ignor√©es`);
  }

  /**
   * D√©monstration de la compression
   */
  private async demonstrateCompression(): Promise<void> {
    console.log('\nüóúÔ∏è D√©monstration de la compression...');
    
    // Cr√©er une m√©moire volumineuse pour tester la compression
    const largeContent = `
    /**
     * Fonction complexe avec beaucoup de commentaires et de code
     * Cette fonction d√©montre les capacit√©s de compression du syst√®me
     */
    function complexFunction(param1: string, param2: number, param3: boolean): Promise<any> {
      // TODO: Optimiser cette fonction
      // FIXME: G√©rer les cas d'erreur
      
      const result = {
        data: param1.repeat(param2),
        isValid: param3,
        timestamp: new Date(),
        metadata: {
          version: '1.0.0',
          author: 'demo',
          description: 'Fonction de d√©monstration pour la compression'
        }
      };
      
      // Traitement complexe avec beaucoup de lignes
      for (let i = 0; i < param2; i++) {
        console.log(\`Processing iteration \${i}\`);
        // Simulation de traitement
        if (i % 2 === 0) {
          result.data += \` - even \${i}\`;
        } else {
          result.data += \` - odd \${i}\`;
        }
      }
      
      return Promise.resolve(result);
    }
    
    export { complexFunction };
    `;
    
    const largeMemoryId = await this.memoryManager.createMemory(
      largeContent,
      MemoryType.REPOSITORY,
      ['function', 'complex', 'demo'],
      {
        language: 'typescript',
        category: 'code-example',
        source: 'demo.ts'
      }
    );
    
    console.log(`‚úÖ M√©moire volumineuse cr√©√©e : ${largeContent.length} caract√®res`);
    
    // V√©rifier si la compression est n√©cessaire
    const allMemories = await this.memoryManager.searchMemories('');
    const totalSize = allMemories.reduce((sum, result) => sum + result.memory.size, 0);
    console.log(`‚úÖ Taille totale actuelle : ${(totalSize / 1024).toFixed(2)} KB`);
    
    // D√©clencher la compression si n√©cessaire
    try {
      await this.memoryManager.compressMemories();
      console.log(`‚úÖ Compression effectu√©e`);
      
      // V√©rifier les statistiques apr√®s compression
      const statsAfterCompression = await this.memoryManager.getStats();
      console.log(`‚úÖ Apr√®s compression : ${statsAfterCompression.compressedCount} m√©moires compress√©es`);
      
    } catch (error) {
      console.log(`‚ÑπÔ∏è Compression non n√©cessaire ou erreur : ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Nettoyer les ressources
   */
  async cleanup(): Promise<void> {
    await this.memoryManager.dispose();
    console.log('‚úÖ Ressources nettoy√©es');
  }
}

/**
 * Fonction utilitaire pour ex√©cuter la d√©monstration
 */
export async function runMemorySystemDemo(context: vscode.ExtensionContext): Promise<void> {
  const demo = new MemorySystemDemo(context.globalStorageUri);
  
  try {
    await demo.runDemo();
  } finally {
    await demo.cleanup();
  }
}

/**
 * Commande VSCode pour lancer la d√©monstration
 */
export function registerDemoCommand(context: vscode.ExtensionContext): void {
  const command = vscode.commands.registerCommand('codeAssist.runMemoryDemo', async () => {
    try {
      vscode.window.showInformationMessage('üß† D√©marrage de la d√©monstration du syst√®me de m√©moires...');
      
      await runMemorySystemDemo(context);
      
      vscode.window.showInformationMessage('üéâ D√©monstration du syst√®me de m√©moires termin√©e ! Consultez la console pour les d√©tails.');
    } catch (error) {
      vscode.window.showErrorMessage(`‚ùå Erreur lors de la d√©monstration : ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  });
  
  context.subscriptions.push(command);
}
